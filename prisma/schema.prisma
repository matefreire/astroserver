generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//enums 
enum Access_level {
  ADMIN //Admin
  USER //User
}

enum Type_post_enum {
  NOTICIA
  POST
  CURIOSITY
  EVENTO
  FOTOGRAFIA
  DICAS
  PERGUNTA
  OUTRO
}

model User {
  id           String             @id @default(uuid())
  name         String
  email        String             @unique @db.Text
  description  String?            @db.Text
  password     String
  picture      String?            @db.Text
  access_level Access_level       @default(USER)
  posts        Post[]
  astronomers  User_astronomers[]
  comments     Comment[]
  createdAt    DateTime           @default(now())
  deletedAt    DateTime?
  PostHistory  PostHistory[]
}

model Post {
  id          String         @id @default(uuid())
  title       String
  description String
  is_accepted Boolean        @default(false)
  picture     String?        @db.Text
  post_type   Type_post_enum @default(POST)
  user        User           @relation(fields: [userId], references: [id])
  userId      String
  comments    Comment[]
  createdAt   DateTime       @default(now())
}

model PostHistory {
  id          String    @id @default(uuid())
  title       String
  description String
  picture     String?   @db.Text
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  comments    Comment[]
  createdAt   DateTime  @default(now())
}

model Astronomer {
  id          String             @id @default(uuid())
  name        String             @unique
  picture     String             @db.Text
  description String             @db.Text
  birthday    DateTime
  fallowers   User_astronomers[]
}

model User_astronomers {
  userId       String
  astronomerId String
  user         User       @relation(fields: [userId], references: [id])
  astronomer   Astronomer @relation(fields: [astronomerId], references: [id])

  @@id([userId, astronomerId])
}

model Comment {
  id            String       @id @default(uuid())
  description   String
  userId        String
  postId        String
  postHistoryId String?
  user          User         @relation(fields: [userId], references: [id])
  post          Post         @relation(fields: [postId], references: [id])
  PostHistory   PostHistory? @relation(fields: [postHistoryId], references: [id])
  createdAt     DateTime     @default(now())
}
